diff --git a/Raycast2D/end/src/Demo/Demo.gd b/Raycast2D/end/src/Demo/Demo.gd
index 8cde6be..a699da0 100644
--- a/Raycast2D/end/src/Demo/Demo.gd
+++ b/Raycast2D/end/src/Demo/Demo.gd
@@ -4,11 +4,11 @@ extends Node2D
 export var hit_particle: PackedScene
 
 
-func create_hit_particle(particle_position: Vector2) -> void:
+func create_hit_particle(particle_position: Vector2):
 	var temp = hit_particle.instance()
 	temp.position = particle_position
 	add_child(temp)
 
 
-func _on_Player_shot_bullet(particle_position: Vector2) -> void:
+func _on_Player_make_hit_effect(particle_position: Vector2):
 	create_hit_particle(particle_position)
diff --git a/Raycast2D/end/src/Demo/TurretDemo.tscn b/Raycast2D/end/src/Demo/TurretDemo.tscn
index 7bbf6cb..e676f5c 100644
--- a/Raycast2D/end/src/Demo/TurretDemo.tscn
+++ b/Raycast2D/end/src/Demo/TurretDemo.tscn
@@ -48,4 +48,4 @@ position = Vector2( 1700, 500 )
 
 [node name="Barricade4" parent="YSort/Barricade" instance=ExtResource( 6 )]
 position = Vector2( 1508.72, 500 )
-[connection signal="shot_bullet" from="YSort/Player" to="." method="_on_Player_shot_bullet"]
+[connection signal="make_hit_effect" from="YSort/Player" to="." method="_on_Player_make_hit_effect"]
diff --git a/Raycast2D/end/src/Turret/Turret.gd b/Raycast2D/end/src/Turret/Turret.gd
index 6449f7b..d028d60 100644
--- a/Raycast2D/end/src/Turret/Turret.gd
+++ b/Raycast2D/end/src/Turret/Turret.gd
@@ -9,7 +9,7 @@ points the shot towards the player
 """
 
 
-export var rotation_speed: = 100.0
+export var rotation_speed: = 45.0
 export var turret_shot: PackedScene
 
 
@@ -23,33 +23,30 @@ onready var ray:= $Pointer/RayCast2D
 onready var shot_timer:= $ShotDelay
 
 
-func _process(delta) -> void:
+func _process(delta):
 	check_target()
 	pointer.rotation_degrees += rotation_speed * delta
 	shoot()
 
 
-func check_target() -> void:
+func check_target():
 	colliding = ray.is_colliding()
 	if colliding:
 		hit_point = ray.get_collision_point()
 
 
-func shoot() -> void:
-	if not (can_shoot and colliding):
-		return
-	if not ray.get_collider().is_in_group("Player"):
-		return
+func shoot():
+	if can_shoot and colliding:
+		if ray.get_collider().is_in_group("Player"):
+			can_shoot = false
+			var temp = turret_shot.instance()
+			add_child(temp)
+			temp.global_position = global_position
+			temp.rotation_degrees = pointer.rotation_degrees + 90
+			temp.setup(hit_point - position)
+			shot_timer.start()
 
-	can_shoot = false
-	var shot: = turret_shot.instance()
-	add_child(shot)
-	shot.global_position = global_position
-	shot.rotation_degrees = pointer.rotation_degrees + 90
-	shot.setup(hit_point - position)
-	shot_timer.start()
 
 
-
-func _on_ShotDelay_timeout() -> void:
+func _on_ShotDelay_timeout():
 	can_shoot = true
diff --git a/Raycast2D/end/src/player/Player.gd b/Raycast2D/end/src/player/Player.gd
index 055afac..31abd9a 100644
--- a/Raycast2D/end/src/player/Player.gd
+++ b/Raycast2D/end/src/player/Player.gd
@@ -9,43 +9,51 @@ Uses a raycast to signal the scene to generate a particle
 to simulate hitscan weapons.  
 """
 
+export var speed: = 500.0
 
-signal shot_bullet
-
-onready var ray: = $Pointer/RayCast2D
-onready var pointer: = $Pointer
 
-export var speed: = 500.0
+var colliding:= false
+var hit_position: = Vector2.ZERO
 
-var colliding: = false
 
+onready var ray = $Pointer/RayCast2D
+onready var pointer = $Pointer
 
-func _unhandled_input(event: InputEvent) -> void:
-	if event.is_action_pressed("fire") and ray.is_colliding():
-		shoot()
 
+signal make_hit_effect
+signal pointer_direction
 
-func _process(delta) -> void:
+func _process(delta):
+	get_collision_info()
 	move()
+	shoot()
 
 
-func move() -> void:
-	var direction: = Vector2(
+func move():
+	var direction: = Vector2.ZERO
+	direction = Vector2(
 		Input.get_action_strength("right") - Input.get_action_strength("left"),
 		Input.get_action_strength("down") - Input.get_action_strength("up")
-	).normalized()
-
+		).normalized()
 	var velocity = direction * speed
-	move_and_slide(velocity)
-
-	if direction != Vector2.ZERO:
+	move_and_slide(velocity, Vector2.UP)
+	if direction.length() > 0:
 		change_pointer_direction(direction)
 
 
-func shoot() -> void:
-	emit_signal("shot_bullet", ray.get_collision_point())
+func shoot():
+	if Input.is_action_just_pressed("fire") and colliding:
+		emit_signal("make_hit_effect", hit_position)
 
 
-func change_pointer_direction(direction: Vector2) -> void:
+func change_pointer_direction(direction: Vector2):
 	var temp = rad2deg(atan2(direction.y, direction.x))
 	pointer.rotation_degrees = temp
+
+
+func get_collision_info():
+	colliding = ray.is_colliding()
+	if colliding:
+		hit_position = ray.get_collision_point()
+
+
